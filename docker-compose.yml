version: "3.8"

services:

  zookeeper:
    image: zookeeper:3.4.9
    hostname: zookeeper
    ports:
      - "2181:2181"
    environment:
      ZOO_MY_ID: 1
      ZOO_PORT: 2181
      ZOO_SERVERS: server.1=zookeeper:2888:3888
    volumes:
      - ./kafka/zookeeper/data:/data
      - ./kafka/zookeeper/datalog:/datalog

  kafka1:
    image: confluentinc/cp-kafka:5.3.0
    hostname: kafka1
    ports:
      - "9091:9091"
    environment:
      KAFKA_ADVERTISED_LISTENERS: LISTENER_DOCKER_INTERNAL://kafka1:19091,LISTENER_DOCKER_EXTERNAL://${DOCKER_HOST_IP:-127.0.0.1}:9091
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: LISTENER_DOCKER_INTERNAL:PLAINTEXT,LISTENER_DOCKER_EXTERNAL:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: LISTENER_DOCKER_INTERNAL
      KAFKA_ZOOKEEPER_CONNECT: "zookeeper:2181"
      KAFKA_BROKER_ID: 1
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    volumes:
      - ./kafka/kafka/data:/var/lib/kafka/data
    depends_on:
      - zookeeper

  kafdrop:
    image: obsidiandynamics/kafdrop
    restart: "no"
    ports:
      - "9000:9000"
    environment:
      KAFKA_BROKERCONNECT: "kafka1:19091"
    depends_on:
      - kafka1

  db:
    image: postgres:14.1-alpine
    container_name: ss-postgres
    volumes:
      - ./postgres_data:/var/lib/postgresql/data/
    env_file:
      - backend/.env
    ports:
      - "5445:5432"
    restart: always

  redis:
    image: redis:7.0.2-alpine
    container_name: ss-redis
    restart: on-failure
    command: --port 6378
    ports:
      - "6378:6378"
    expose:
      - "6378"

  mongodb:
    image: mongo
    container_name: ss-mongodb
    volumes:
      - ./mongodb_data:/var/lib/mongodb/data
    env_file:
      - telebot/.env
    ports:
      - "27017:27017"
    expose:
      - "27017"
    command: mongod
    restart: on-failure

  celery:
    build: ./telebot
    container_name: ss-celery
    command: celery -A tasks worker --loglevel=INFO
    volumes:
      - ./celery_data:/var/lib/celery/data
    env_file:
      - telebot/.env
    restart: on-failure
    depends_on:
      - redis

  telebot:
    build: ./telebot
    container_name: ss-telebot
    ports:
      - "8009:8009"
    restart: on-failure
    depends_on:
      - redis
      - mongodb
      - celery

  backend:
    build: ./backend
    container_name: ss-backend
    volumes:
      - .:/src/app/
    ports:
      - "8008:8008"
    env_file:
      - backend/.env
    restart: on-failure
    depends_on:
      - db

volumes:
  mongodb_data:
  postgres_data:
  db:
    driver: local